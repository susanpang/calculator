import operation from "../operation";

/*
test cases:
1) 1 +							not enough inputs. operation() won't get called
2) 1 *							not enough inputs. operation() won't get called
3) 1 + 2 +
4) 1 + 2 *
5) 1 * 2 +  => 2 +  case 1
6) 1 * 2 *  => 2 *  case 2

7) 1 + 2 * 3 +	=> 1 + 6 +	case 1
8) 1 + 2 * 3 *	=> 1 + 6 *	case 2

9) 95.782 - 60 * 0.35 = 		mix decimal and percentage

Evaluation
10) 90 = 
11) 1 + 2 =
12) 1 * 2 =
13) 1 + 2 * 3 =   => 1 + 6 =  case 11
14) 1 * 29.3 * -0.3 =   => 29.3 * -0.3 =  case 12

15) 6.5 - 23.5 / 0 = 				division by zero
16) 12345678909876.54 * 1000000 = 		large numbers
*/
test('1 + 2 +', () => {
	expect(operation(["1", "+", "2", "+", "", ""], 3)).toEqual([["3", "+", "", "", "", ""], 1, "3"]);
});

test('1 + 2 *', () => {
	expect(operation(["1", "+", "2", "*", "", ""], 3)).toEqual([["1", "+", "2", "*", "", ""], 3, "2"]);
});

test('1 * 2 +', () => {
	expect(operation(["1", "*", "2", "+", "", ""], 3)).toEqual([["2", "+", "", "", "", ""], 1, "2"]);
});

test('1 * 2 *', () => {
	expect(operation(["1", "*", "2", "*", "", ""], 3)).toEqual([["2", "*", "", "", "", ""], 1, "2"]);
});

test('1 + 2 * 3 +', () => {
	expect(operation(["1", "+", "2", "*", "3", "+"], 5)).toEqual([["7", "+", "", "", "", ""], 1, "7"]);
});

test('1 + 2 * 3 *', () => {
	expect(operation(["1", "+", "2", "*", "3", "*"], 5)).toEqual([["1", "+", "6", "*", "", ""], 3, "6"]);
});

test('95.782 - 60 * 0.35 +', () => {
	expect(operation(["95.782", "-", "60", "*", "0.35", "+"], 5)).toEqual([["74.782", "+", "", "", "", ""], 1, "74.782"]);
});

test('90 =', () => {
	expect(operation(["90", "=", "", "", "", ""], 1)).toEqual([["90", "", "", "", "", ""], 1, "90"]);
});

test('1 + 2 =', () => {
	expect(operation(["1", "+", "2", "=", "", ""], 3)).toEqual([["3", "", "", "", "", ""], 1, "3"]);
});

test('1 * 2 =', () => {
	expect(operation(["1", "*", "2", "=", "", ""], 3)).toEqual([["2", "", "", "", "", ""], 1, "2"]);
});

test('1 + 2 * 3 =', () => {
	expect(operation(["1", "+", "2", "*", "3", "="], 5)).toEqual([["7", "", "", "", "", ""], 1, "7"]);
});

test('1 * 29.3 * -0.3 =', () => {
	expect(operation(["1", "*", "29.3", "*", "-0.3", "="], 5)).toEqual([["-8.79", "", "", "", "", ""], 1, "-8.79"]);
});

test('6.5 - 23.5 / 0 =', () => {
	expect(operation(["6.5", "-", "23.5", "/", "0", "="], 5)).toEqual([["Error", "", "", "", "", ""], 1, "Error"]);
});

test('23 / 0 +', () => {
	expect(operation(["23", "/", "0", "+", "", ""], 3)).toEqual([["Error", "", "", "", "", ""], 1, "Error"]);
});

test('12345678909876.54 * 1000000 =', () => {
	expect(operation(["12345678909876.54", "*", "1000000", "=", "", ""], 3))
	.toEqual([["1.23456789098765e+19", "", "", "", "", ""], 1, "1.23456789098765e+19"]);
});



